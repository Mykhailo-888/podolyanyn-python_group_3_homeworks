import unittest
from unittest.mock import patch
from io import StringIO
import os
import json
import tempfile

# –§—É–Ω–∫—Ü—ñ—ó –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ ¬´–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞ –∫–Ω–∏–≥–∞¬ª
def load_data(filename):
    if not os.path.exists(filename):
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return {}
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª '{filename}' –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON.")
        return {}

def save_data(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    print("üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

def show_menu():
    print("\nüìñ –ú–µ–Ω—é —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ—ó –∫–Ω–∏–≥–∏:")
    print("1. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç")
    print("2. –ü–æ—à—É–∫ –∑–∞ —ñ–º'—è–º")
    print("3. –ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º")
    print("4. –ü–æ—à—É–∫ –∑–∞ –ø–æ–≤–Ω–∏–º —ñ–º'—è–º")
    print("5. –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    print("6. –ü–æ—à—É–∫ –∑–∞ –º—ñ—Å—Ç–æ–º –∞–±–æ —à—Ç–∞—Ç–æ–º")
    print("7. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
    print("8. –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
    print("9. –í–∏—Ö—ñ–¥")

def print_contact(phone, data):
    print(f"üìû {phone} ‚Äî {data['first_name']} {data['last_name']} ({data['city']}, {data['state']})")

def add_contact(phonebook):
    phone = input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ")
    if not phone:
        print("‚õî –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return
    if phone in phonebook:
        print("‚õî –¢–∞–∫–∏–π –Ω–æ–º–µ—Ä –≤–∂–µ —ñ—Å–Ω—É—î.")
        return
    contact = {
        "first_name": input("–Ü–º'—è: "),
        "last_name": input("–ü—Ä—ñ–∑–≤–∏—â–µ: "),
        "city": input("–ú—ñ—Å—Ç–æ: "),
        "state": input("–û–±–ª–∞—Å—Ç—å/–®—Ç–∞—Ç: ")
    }
    phonebook[phone] = contact
    print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–¥–∞–Ω–æ.")

def search(phonebook, key, value):
    results = []
    for phone, info in phonebook.items():
        if info.get(key, '').lower() == value.lower():
            results.append((phone, info))
    return results

def search_full_name(phonebook, full_name):
    results = []
    for phone, info in phonebook.items():
        if f"{info['first_name']} {info['last_name']}".lower() == full_name.lower():
            results.append((phone, info))
    return results

def delete_contact(phonebook):
    phone = input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
    if phone in phonebook:
        del phonebook[phone]
        print("üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        print("üö´ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def update_contact(phonebook):
    phone = input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ")
    if phone not in phonebook:
        print("üö´ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    info = phonebook[phone]
    info['first_name'] = input(f"–Ü–º'—è [{info['first_name']}]: ") or info['first_name']
    info['last_name'] = input(f"–ü—Ä—ñ–∑–≤–∏—â–µ [{info['last_name']}]: ") or info['last_name']
    info['city'] = input(f"–ú—ñ—Å—Ç–æ [{info['city']}]: ") or info['city']
    info['state'] = input(f"–û–±–ª–∞—Å—Ç—å/–®—Ç–∞—Ç [{info['state']}]: ") or info['state']
    print("üîÑ –ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ.")

# –ö–ª–∞—Å —Ç–µ—Å—Ç—ñ–≤
class TestPhonebook(unittest.TestCase):
    def setUp(self):
        self.temp_file = tempfile.NamedTemporaryFile(mode='w+', delete=False, encoding='utf-8')
        self.temp_file.close()
        self.pb = {}

    def tearDown(self):
        os.unlink(self.temp_file.name)

    @patch('builtins.input', side_effect=['123456', '–ú–∏–∫–æ–ª–∞', '–ú–∞–∫—Å–∏–º–µ–Ω–∫–æ', '–ö–∏—ó–≤', '–ö–∏—ó–≤—Å—å–∫–∞', '123456', '–Ü–≤–∞–Ω', '–Ü–≤–∞–Ω–æ–≤', '–õ—å–≤—ñ–≤', '–õ—å–≤—ñ–≤—Å—å–∫–∞'])
    def test_add_contact_success(self, mock_input):
        add_contact(self.pb)
        self.assertIn('123456', self.pb)
        self.assertEqual(self.pb['123456']['city'], '–ö–∏—ó–≤')
        with patch('sys.stdout', new=StringIO()) as fake_out:
            add_contact(self.pb)
            self.assertEqual(fake_out.getvalue().strip(), '‚õî –¢–∞–∫–∏–π –Ω–æ–º–µ—Ä –≤–∂–µ —ñ—Å–Ω—É—î.')

    @patch('builtins.input', side_effect=[''])
    def test_add_contact_empty_phone(self, mock_input):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            add_contact(self.pb)
            self.assertNotIn('', self.pb)
            self.assertEqual(fake_out.getvalue().strip(), '‚õî –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.')

    @patch('builtins.input', side_effect=['123456'])
    def test_delete_contact_success(self, mock_input):
        self.pb['123456'] = {'first_name': '–ú–∏–∫–æ–ª–∞', 'last_name': '–ú–∞–∫—Å–∏–º–µ–Ω–∫–æ', 'city': '–ö–∏—ó–≤', 'state': '–ö–∏—ó–≤—Å—å–∫–∞'}
        with patch('sys.stdout', new=StringIO()) as fake_out:
            delete_contact(self.pb)
            self.assertNotIn('123456', self.pb)
            self.assertEqual(fake_out.getvalue().strip(), 'üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.')

    @patch('builtins.input', side_effect=['999999'])
    def test_delete_contact_not_found(self, mock_input):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            delete_contact(self.pb)
            self.assertEqual(fake_out.getvalue().strip(), 'üö´ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')

    @patch('builtins.input', side_effect=['123456', '–Ü–≤–∞–Ω', '–Ü–≤–∞–Ω–æ–≤', '–õ—å–≤—ñ–≤', '–õ—å–≤—ñ–≤—Å—å–∫–∞'])
    def test_update_contact_success(self, mock_input):
        self.pb['123456'] = {'first_name': '–ú–∏–∫–æ–ª–∞', 'last_name': '–ú–∞–∫—Å–∏–º–µ–Ω–∫–æ', 'city': '–ö–∏—ó–≤', 'state': '–ö–∏—ó–≤—Å—å–∫–∞'}
        with patch('sys.stdout', new=StringIO()) as fake_out:
            update_contact(self.pb)
            self.assertEqual(self.pb['123456']['first_name'], '–Ü–≤–∞–Ω')
            self.assertEqual(fake_out.getvalue().strip(), 'üîÑ –ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ.')

    @patch('builtins.input', side_effect=['999999'])
    def test_update_contact_not_found(self, mock_input):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            update_contact(self.pb)
            self.assertEqual(fake_out.getvalue().strip(), 'üö´ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')

    def test_search_success(self):
        self.pb['123456'] = {'first_name': '–ú–∏–∫–æ–ª–∞', 'last_name': '–ú–∞–∫—Å–∏–º–µ–Ω–∫–æ', 'city': '–ö–∏—ó–≤', 'state': '–ö–∏—ó–≤—Å—å–∫–∞'}
        results = search(self.pb, 'city', '–ö–∏—ó–≤')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0][1]['city'], '–ö–∏—ó–≤')

    def test_search_full_name_success(self):
        self.pb['123456'] = {'first_name': '–ú–∏–∫–æ–ª–∞', 'last_name': '–ú–∞–∫—Å–∏–º–µ–Ω–∫–æ', 'city': '–ö–∏—ó–≤', 'state': '–ö–∏—ó–≤—Å—å–∫–∞'}
        results = search_full_name(self.pb, '–ú–∏–∫–æ–ª–∞ –ú–∞–∫—Å–∏–º–µ–Ω–∫–æ')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0][1]['first_name'], '–ú–∏–∫–æ–ª–∞')

    def test_load_data_file_not_found(self):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            result = load_data('nonexistent.json')
            self.assertEqual(result, {})
            self.assertIn("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª 'nonexistent.json' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", fake_out.getvalue())

    def test_load_data_invalid_json(self):
        with open(self.temp_file.name, 'w', encoding='utf-8') as f:
            f.write('invalid json')
        with patch('sys.stdout', new=StringIO()) as fake_out:
            result = load_data(self.temp_file.name)
            self.assertEqual(result, {})
            self.assertIn(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª '{self.temp_file.name}' –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON.", fake_out.getvalue())

    def test_save_data(self):
        self.pb['123456'] = {'first_name': '–ú–∏–∫–æ–ª–∞', 'last_name': '–ú–∞–∫—Å–∏–º–µ–Ω–∫–æ', 'city': '–ö–∏—ó–≤', 'state': '–ö–∏—ó–≤—Å—å–∫–∞'}
        with patch('sys.stdout', new=StringIO()) as fake_out:
            save_data(self.pb, self.temp_file.name)
            self.assertIn("üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", fake_out.getvalue())
        with open(self.temp_file.name, 'r', encoding='utf-8') as f:
            saved_data = json.load(f)
            self.assertEqual(saved_data, self.pb)

if __name__ == '__main__':
    unittest.main()